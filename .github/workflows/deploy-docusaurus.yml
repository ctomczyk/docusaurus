name: Deploy Docusaurus to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        working-directory: my-website
        run: npm install -f

      - name: Strip injected ESM statements from docs (workaround)
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/strip-esm-from-docs.js <<'NODE'
          // usage: node strip-esm-from-docs.js <docs-dir>
          const fs = require('fs');
          const path = require('path');

          const root = process.argv[2] || 'my-website/docs';

          function getFiles(dir) {
            let out = [];
            for (const e of fs.readdirSync(dir, { withFileTypes: true })) {
              const full = path.join(dir, e.name);
              if (e.isDirectory()) out = out.concat(getFiles(full));
              else if (e.isFile() && (full.endsWith('.md') || full.endsWith('.mdx'))) out.push(full);
            }
            return out;
          }

          function sanitize(src) {
            // Preserve YAML frontmatter at top
            const fmMatch = src.match(/^---\r?\n[\s\S]*?\r?\n---\r?\n?/);
            const head = fmMatch ? fmMatch[0] : '';
            const rest = fmMatch ? src.slice(head.length) : src;

            // Split by fenced code blocks (we must not touch code)
            const parts = rest.split(/(```[\s\S]*?```)/g);
            let changed = false;

            for (let i = 0; i < parts.length; i++) {
              if (parts[i].startsWith('```')) continue; // skip code fences

              const lines = parts[i].split(/\r?\n/);
              const out = [];

              for (let j = 0; j < lines.length; j++) {
                const line = lines[j];
                // If a line begins with import/export (top-level-ish) -> remove it.
                if (/^\s*(?:import|export)\b/.test(line)) {
                  // If it opens a brace block, consume until braces balanced.
                  let braceCount = 0;
                  for (const ch of line) {
                    if (ch === '{') braceCount++;
                    else if (ch === '}') braceCount--;
                  }
                  let k = j + 1;
                  while (braceCount > 0 && k < lines.length) {
                    for (const ch of lines[k]) {
                      if (ch === '{') braceCount++;
                      else if (ch === '}') braceCount--;
                    }
                    k++;
                  }
                  // advance j to last consumed line (k-1). next loop will increment j.
                  j = Math.max(k - 1, j);
                  changed = true;
                  continue; // skip pushing this line (and consumed block)
                } else {
                  out.push(line);
                }
              }

              parts[i] = out.join('\n');
            }

            return { result: head + parts.join(''), changed };
          }

          // run
          if (!fs.existsSync(root)) {
            console.error('Docs directory not found:', root);
            process.exit(0);
          }

          const files = getFiles(root);
          let totalChanged = 0;
          for (const f of files) {
            try {
              const src = fs.readFileSync(f, 'utf8');
              const { result, changed } = sanitize(src);
              if (changed && result !== src) {
                // backup original (only once)
                if (!fs.existsSync(f + '.bak')) fs.writeFileSync(f + '.bak', src, 'utf8');
                fs.writeFileSync(f, result, 'utf8');
                console.log('Patched:', f);
                totalChanged++;
              }
            } catch (err) {
              console.error('Error processing', f, err && err.message);
            }
          }
          console.log('Done. files changed:', totalChanged);
          NODE

          # run it
          node .github/scripts/strip-esm-from-docs.js my-website/docs

          # show any remaining problematic lines (for debugging; harmless)
          echo "--- Remaining top-level import/export lines (if any) ---"
          find my-website/docs -type f \( -name '*.md' -o -name '*.mdx' \) -print0 |
            xargs -0 grep -nH -E '^\s*(import|export)\b' || true

      - name: Build site
        working-directory: my-website
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: my-website/build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4